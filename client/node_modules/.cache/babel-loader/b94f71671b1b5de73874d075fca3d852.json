{"ast":null,"code":"var _jsxFileName = \"/Users/user/Desktop/workspace/deca-frontend/crown-clothing/src/components/with-spinner/with-spinner.component.jsx\";\nimport React from 'react';\nimport { SpinnerContainer, SpinnerOverlay } from './with-spinner.styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst WithSpinner = WrappedComponent => ({\n  isLoading,\n  ...otherProps\n}) => {\n  return isLoading ? /*#__PURE__*/_jsxDEV(SpinnerOverlay, {\n    children: /*#__PURE__*/_jsxDEV(SpinnerContainer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 9\n  }, this) : /*#__PURE__*/_jsxDEV(WrappedComponent, { ...otherProps\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 9\n  }, this);\n};\n\nconst Wrapper = Component => {\n  const RC = props => {\n    let newProps;\n\n    for (const key in props) {\n      if (typeof props[key] === \"number\") {\n        newProps[key] = props[key] + 1;\n      } else {\n        newProps[key] = props[key];\n      }\n    }\n\n    return /*#__PURE__*/_jsxDEV(Component, { ...newProps\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 16\n    }, this);\n  };\n\n  return RC;\n};\n\n_c = Wrapper;\n\nconst Num = ({\n  a,\n  b\n}) => /*#__PURE__*/_jsxDEV(\"span\", {\n  style: {\n    b\n  },\n  children: [\"a + b = \", a + b]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 31,\n  columnNumber: 25\n}, this);\n\n_c2 = Num;\nconst WrappedNum = Wrapper(Num);\n_c3 = WrappedNum;\nconsole.log( /*#__PURE__*/_jsxDEV(WrappedNum, {\n  a: 1,\n  b: 2\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 33,\n  columnNumber: 13\n}, this));\nexport default WithSpinner;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Wrapper\");\n$RefreshReg$(_c2, \"Num\");\n$RefreshReg$(_c3, \"WrappedNum\");","map":{"version":3,"sources":["/Users/user/Desktop/workspace/deca-frontend/crown-clothing/src/components/with-spinner/with-spinner.component.jsx"],"names":["React","SpinnerContainer","SpinnerOverlay","WithSpinner","WrappedComponent","isLoading","otherProps","Wrapper","Component","RC","props","newProps","key","Num","a","b","WrappedNum","console","log"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,gBAAT,EAA2BC,cAA3B,QAAiD,uBAAjD;;;AAEA,MAAMC,WAAW,GAAGC,gBAAgB,IAAI,CAAC;AAACC,EAAAA,SAAD;AAAY,KAAGC;AAAf,CAAD,KAAgC;AAEpE,SAAOD,SAAS,gBACZ,QAAC,cAAD;AAAA,2BACI,QAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADY,gBAKZ,QAAC,gBAAD,OAAsBC;AAAtB;AAAA;AAAA;AAAA;AAAA,UALJ;AAOH,CATD;;AAWA,MAAMC,OAAO,GAAGC,SAAS,IAAI;AACzB,QAAMC,EAAE,GAAIC,KAAD,IAAW;AAClB,QAAIC,QAAJ;;AACA,SAAK,MAAMC,GAAX,IAAkBF,KAAlB,EAAyB;AACrB,UAAI,OAAOA,KAAK,CAACE,GAAD,CAAZ,KAAsB,QAA1B,EAAoC;AAChCD,QAAAA,QAAQ,CAACC,GAAD,CAAR,GAAgBF,KAAK,CAACE,GAAD,CAAL,GAAa,CAA7B;AACH,OAFD,MAEO;AACHD,QAAAA,QAAQ,CAACC,GAAD,CAAR,GAAgBF,KAAK,CAACE,GAAD,CAArB;AACH;AACJ;;AACD,wBAAO,QAAC,SAAD,OAAeD;AAAf;AAAA;AAAA;AAAA;AAAA,YAAP;AACH,GAVD;;AAWA,SAAOF,EAAP;AACH,CAbD;;KAAMF,O;;AAeN,MAAMM,GAAG,GAAG,CAAC;AAACC,EAAAA,CAAD;AAAIC,EAAAA;AAAJ,CAAD,kBAAY;AAAM,EAAA,KAAK,EAAE;AAACA,IAAAA;AAAD,GAAb;AAAA,yBAA2BD,CAAC,GAAGC,CAA/B;AAAA;AAAA;AAAA;AAAA;AAAA,QAAxB;;MAAMF,G;AACN,MAAMG,UAAU,GAAGT,OAAO,CAACM,GAAD,CAA1B;MAAMG,U;AACNC,OAAO,CAACC,GAAR,eAAY,QAAC,UAAD;AAAY,EAAA,CAAC,EAAE,CAAf;AAAkB,EAAA,CAAC,EAAE;AAArB;AAAA;AAAA;AAAA;AAAA,QAAZ;AAEA,eAAef,WAAf","sourcesContent":["import React from 'react';\n\nimport { SpinnerContainer, SpinnerOverlay } from './with-spinner.styles';\n\nconst WithSpinner = WrappedComponent => ({isLoading, ...otherProps}) => {\n    \n    return isLoading ? (\n        <SpinnerOverlay>\n            <SpinnerContainer />\n        </SpinnerOverlay>\n    ) : (\n        <WrappedComponent {...otherProps}/> \n    )\n};\n\nconst Wrapper = Component => {\n    const RC = (props) => {\n        let newProps;\n        for (const key in props) {\n            if (typeof props[key] === \"number\") {\n                newProps[key] = props[key] + 1;\n            } else {\n                newProps[key] = props[key];\n            }\n        }\n        return <Component {...newProps}/>\n    }\n    return RC;\n}\n\nconst Num = ({a, b}) => <span style={{b}}>a + b = {a + b}</span>;\nconst WrappedNum = Wrapper(Num);\nconsole.log(<WrappedNum a={1} b={2}/>);\n\nexport default WithSpinner;"]},"metadata":{},"sourceType":"module"}