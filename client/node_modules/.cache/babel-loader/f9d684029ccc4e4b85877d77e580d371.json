{"ast":null,"code":"var _jsxFileName = \"/Users/user/Desktop/workspace/deca-frontend/crown-clothing/src/pages/shop/shop.component.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { Route } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { updateCollections } from '../../redux/shop/shop.actions';\nimport WithSpinner from '../../components/with-spinner/with-spinner.component';\nimport CollectionsOverview from '../../components/collections-overview/collections-overview.component';\nimport CollectionPage from '../collection/collection.component';\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CollectionsOverviewWithSpinner = WithSpinner(CollectionsOverview);\n_c = CollectionsOverviewWithSpinner;\nconst CollectionPageWithSpinner = WithSpinner(CollectionPage);\n_c2 = CollectionPageWithSpinner;\n\nconst ShopPage = props => {\n  _s();\n\n  const [loadingState, setLoadingState] = useState(true);\n  const {\n    match,\n    updateCollections\n  } = props;\n  useEffect(() => {\n    const collectionRef = firestore.collection('collections'); // const unsubscribeFromSnapshot = collectionRef.onSnapshot(async snapshot =>{\n    //    const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n    //    updateCollections(collectionsMap);\n    //    setLoadingState(false);\n    // });\n    //\n\n    collectionRef.get().then(snapshot => {\n      const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n      updateCollections(collectionsMap);\n      setLoadingState(false);\n    });\n  });\n  return (\n    /*#__PURE__*/\n\n    /**\n     * using render in place of component allows us to pass in a function\n     * where the parameters and the function are the parameters the component will\n     * receive\n     */\n    _jsxDEV(\"div\", {\n      className: \"shop-page\",\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        exact: true,\n        path: `${match.path}`,\n        render: props => /*#__PURE__*/_jsxDEV(CollectionsOverviewWithSpinner, {\n          isLoading: loadingState,\n          ...props\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 68\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: `${match.path}/:collectionId`,\n        render: props => /*#__PURE__*/_jsxDEV(CollectionPageWithSpinner, {\n          isLoading: loadingState,\n          ...props\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 76\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }, this)\n  );\n};\n\n_s(ShopPage, \"wGG+OKidQxVaw6wWWawoFlamVzk=\");\n\n_c3 = ShopPage;\n\nconst mapDispatchToProps = dispatch => ({\n  updateCollections: collectionsMap => dispatch(updateCollections(collectionsMap))\n});\n\nexport default connect(null, mapDispatchToProps)(ShopPage);\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"CollectionsOverviewWithSpinner\");\n$RefreshReg$(_c2, \"CollectionPageWithSpinner\");\n$RefreshReg$(_c3, \"ShopPage\");","map":{"version":3,"sources":["/Users/user/Desktop/workspace/deca-frontend/crown-clothing/src/pages/shop/shop.component.jsx"],"names":["React","useEffect","useState","Route","connect","updateCollections","WithSpinner","CollectionsOverview","CollectionPage","firestore","convertCollectionsSnapshotToMap","CollectionsOverviewWithSpinner","CollectionPageWithSpinner","ShopPage","props","loadingState","setLoadingState","match","collectionRef","collection","get","then","snapshot","collectionsMap","path","mapDispatchToProps","dispatch"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,KAAT,QAAsB,kBAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,SAASC,iBAAT,QAAkC,+BAAlC;AAEA,OAAOC,WAAP,MAAwB,sDAAxB;AAEA,OAAOC,mBAAP,MAAgC,sEAAhC;AACA,OAAOC,cAAP,MAA2B,oCAA3B;AAEA,SAASC,SAAT,EAAoBC,+BAApB,QAA2D,+BAA3D;;AAEA,MAAMC,8BAA8B,GAAGL,WAAW,CAACC,mBAAD,CAAlD;KAAMI,8B;AACN,MAAMC,yBAAyB,GAAGN,WAAW,CAACE,cAAD,CAA7C;MAAMI,yB;;AAEN,MAAMC,QAAQ,GAAIC,KAAD,IAAW;AAAA;;AACxB,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCd,QAAQ,CAAC,IAAD,CAAhD;AACA,QAAM;AAACe,IAAAA,KAAD;AAAQZ,IAAAA;AAAR,MAA8BS,KAApC;AAEAb,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMiB,aAAa,GAAGT,SAAS,CAACU,UAAV,CAAqB,aAArB,CAAtB,CADY,CAEZ;AACA;AACA;AACA;AACA;AAEA;;AACAD,IAAAA,aAAa,CAACE,GAAd,GAAoBC,IAApB,CAAyBC,QAAQ,IAAG;AAChC,YAAMC,cAAc,GAAGb,+BAA+B,CAACY,QAAD,CAAtD;AACAjB,MAAAA,iBAAiB,CAACkB,cAAD,CAAjB;AACAP,MAAAA,eAAe,CAAC,KAAD,CAAf;AACH,KAJD;AAKH,GAdQ,CAAT;AAgBA;AAAA;;AACI;AACR;AACA;AACA;AACA;AACQ;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,8BACI,QAAC,KAAD;AAAO,QAAA,KAAK,MAAZ;AAAa,QAAA,IAAI,EAAG,GAAEC,KAAK,CAACO,IAAK,EAAjC;AAAoC,QAAA,MAAM,EAAGV,KAAD,iBAAW,QAAC,8BAAD;AAAgC,UAAA,SAAS,EAAEC,YAA3C;AAAA,aAA6DD;AAA7D;AAAA;AAAA;AAAA;AAAA;AAAvD;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI,QAAC,KAAD;AAAO,QAAA,IAAI,EAAG,GAAEG,KAAK,CAACO,IAAK,gBAA3B;AAA4C,QAAA,MAAM,EAAGV,KAAD,iBAAW,QAAC,yBAAD;AAA2B,UAAA,SAAS,EAAEC,YAAtC;AAAA,aAAwDD;AAAxD;AAAA;AAAA;AAAA;AAAA;AAA/D;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AANJ;AAUE,CA9BN;;GAAMD,Q;;MAAAA,Q;;AAgCN,MAAMY,kBAAkB,GAAGC,QAAQ,KAAK;AACpCrB,EAAAA,iBAAiB,EAAEkB,cAAc,IAAIG,QAAQ,CAACrB,iBAAiB,CAACkB,cAAD,CAAlB;AADT,CAAL,CAAnC;;AAIA,eAAenB,OAAO,CAAC,IAAD,EAAOqB,kBAAP,CAAP,CAAkCZ,QAAlC,CAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Route } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport { updateCollections } from '../../redux/shop/shop.actions';\n\nimport WithSpinner from '../../components/with-spinner/with-spinner.component';\n\nimport CollectionsOverview from '../../components/collections-overview/collections-overview.component';\nimport CollectionPage from '../collection/collection.component';\n\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils';\n\nconst CollectionsOverviewWithSpinner = WithSpinner(CollectionsOverview);\nconst CollectionPageWithSpinner = WithSpinner(CollectionPage);\n\nconst ShopPage = (props) => {\n    const [loadingState, setLoadingState] = useState(true);\n    const {match, updateCollections } = props;\n\n    useEffect(() => {\n        const collectionRef = firestore.collection('collections');\n        // const unsubscribeFromSnapshot = collectionRef.onSnapshot(async snapshot =>{\n        //    const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n        //    updateCollections(collectionsMap);\n        //    setLoadingState(false);\n        // });\n\n        //\n        collectionRef.get().then(snapshot =>{\n            const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n            updateCollections(collectionsMap);\n            setLoadingState(false);\n        })\n    });\n\n    return (\n        /**\n         * using render in place of component allows us to pass in a function\n         * where the parameters and the function are the parameters the component will\n         * receive\n         */\n        <div className='shop-page'>\n            <Route exact path={`${match.path}`} render={(props) => <CollectionsOverviewWithSpinner isLoading={loadingState} {...props}/>}/>\n            <Route path={`${match.path}/:collectionId`} render={(props) => <CollectionPageWithSpinner isLoading={loadingState} {...props}/>}/>\n        </div>\n    )};\n\nconst mapDispatchToProps = dispatch => ({\n    updateCollections: collectionsMap => dispatch(updateCollections(collectionsMap))\n});\n\nexport default connect(null, mapDispatchToProps)(ShopPage);"]},"metadata":{},"sourceType":"module"}