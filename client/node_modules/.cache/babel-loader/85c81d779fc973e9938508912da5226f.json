{"ast":null,"code":"import ShopActionTypes from './shop.types';\nexport const fetchCollectionsStart = collectionMap => ({\n  type: ShopActionTypes.FETCH_COLLECTIONS_START,\n  payload: collectionMap\n});\nexport const fetchCollectionsStartAsync = () => {\n  return dispatch => {\n    const collectionRef = firestore.collection('collections');\n    /**\n     * using firestore to update collections\n     */\n    // const unsubscribeFromSnapshot = collectionRef.onSnapshot(async snapshot =>{\n    //    const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n    //    updateCollections(collectionsMap);\n    //    setLoadingState(false);\n    // });\n    // the con of these .get() method is that it updates only once as oppossed to .onSnapshot() that does live checking\n\n    collectionRef.get().then(snapshot => {\n      const collectionsMap = convertCollectionsSnapshotToMap(snapshot); // updateCollections(collectionsMap);\n\n      setLoadingState(false);\n    });\n  };\n};","map":{"version":3,"sources":["/Users/user/Desktop/workspace/deca-frontend/crown-clothing/src/redux/shop/shop.actions.js"],"names":["ShopActionTypes","fetchCollectionsStart","collectionMap","type","FETCH_COLLECTIONS_START","payload","fetchCollectionsStartAsync","dispatch","collectionRef","firestore","collection","get","then","snapshot","collectionsMap","convertCollectionsSnapshotToMap","setLoadingState"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,cAA5B;AAGA,OAAO,MAAMC,qBAAqB,GAAIC,aAAD,KAAoB;AACrDC,EAAAA,IAAI,EAAEH,eAAe,CAACI,uBAD+B;AAErDC,EAAAA,OAAO,EAAEH;AAF4C,CAApB,CAA9B;AAKP,OAAO,MAAMI,0BAA0B,GAAG,MAAM;AAC5C,SAAOC,QAAQ,IAAI;AACf,UAAMC,aAAa,GAAGC,SAAS,CAACC,UAAV,CAAqB,aAArB,CAAtB;AACA;AACR;AACA;AACQ;AACA;AACA;AACA;AACA;AAEA;;AACAF,IAAAA,aAAa,CAACG,GAAd,GAAoBC,IAApB,CAAyBC,QAAQ,IAAG;AAChC,YAAMC,cAAc,GAAGC,+BAA+B,CAACF,QAAD,CAAtD,CADgC,CAEhC;;AACAG,MAAAA,eAAe,CAAC,KAAD,CAAf;AACH,KAJD;AAKH,GAjBD;AAkBH,CAnBM","sourcesContent":["import ShopActionTypes from './shop.types';\n\n\nexport const fetchCollectionsStart = (collectionMap) => ({\n    type: ShopActionTypes.FETCH_COLLECTIONS_START,\n    payload: collectionMap\n});\n\nexport const fetchCollectionsStartAsync = () => {\n    return dispatch => {\n        const collectionRef = firestore.collection('collections');\n        /**\n         * using firestore to update collections\n         */\n        // const unsubscribeFromSnapshot = collectionRef.onSnapshot(async snapshot =>{\n        //    const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n        //    updateCollections(collectionsMap);\n        //    setLoadingState(false);\n        // });\n\n        // the con of these .get() method is that it updates only once as oppossed to .onSnapshot() that does live checking\n        collectionRef.get().then(snapshot =>{\n            const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n            // updateCollections(collectionsMap);\n            setLoadingState(false);\n        })\n    }\n};"]},"metadata":{},"sourceType":"module"}